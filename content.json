{"meta":{"title":"Ashinluo-blogs","subtitle":"Ashinluo1的github博客","description":"web前端,WEB,html5,css3,javascrpt,vue,node,H5,微信小程序，webpack,微信公众号","author":"Ashinluo","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"前端模块化开发","slug":"前端模块化开发","date":"2019-04-26T05:14:46.000Z","updated":"2019-04-26T06:24:20.858Z","comments":true,"path":"2019/04/26/前端模块化开发/","link":"","permalink":"http://yoursite.com/2019/04/26/前端模块化开发/","excerpt":"","text":"随着前端的发展，前端也像后端一样渐渐地也往模块化方向发展，常见的模块化的规范有commonjs，AMD,CMD。本文对这几种模块规范简单说明一下。common.jscommonjs是因为nodejs的模块引进的，是服务端的模块化，写法是123456789a.jsmodule.exports = function()&#123; &#125;用的时候是 var a = require(&apos;./a.js&apos;);a(); 在服务器端因为资源加载是实时的，是服务端直接从硬盘上读取资源,但是浏览器需要从服务器上拿资源，所以commonjs这种写法是不行的，所以有了AMD,CMDAMDAMD是requirejs提出来的模块规范，是先声明模块，代码如下 123456define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) &#123; // 依赖必须一开始就写好 a.doSomething() // 此处略去 100 行 b.doSomething() ...&#125;) CMDCMD是seajs提出来的模块规范，是之后加载模块，代码如下1define(function(require, exports, module) &#123; var a = require(&apos;./a&apos;) a.doSomething() // 此处略去 100 行 var b = require(&apos;./b&apos;) // 依赖可以就近书写 b.doSomething() // ... &#125;) 区别对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.webpack和commonjswebpack能够把commonjs写出来的代码编译成浏览器能识别的代码先看下源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107bar.jsexport default function bar() &#123; console.log(&quot;it is from bar..&quot;)&#125;entry.jsimport bar from &apos;./bar&apos;;bar();webpack.config.jsmodule.exports = &#123; entry:&apos;./entry.js&apos;, output:&#123; path:__dirname, filename:&apos;bundle.js&apos; &#125;&#125;经过webpack编译之后的代码如下 /******/ (function(modules) &#123; // webpackBootstrap/******/ // The module cache/******/ var installedModules = &#123;&#125;;/******//******/ // The require function/******/ function __webpack_require__(moduleId) &#123;/******//******/ // Check if module is in cache/******/ if(installedModules[moduleId]) &#123;/******/ return installedModules[moduleId].exports;/******/ &#125;/******/ // Create a new module (and put it into the cache)/******/ var module = installedModules[moduleId] = &#123;/******/ i: moduleId,/******/ l: false,/******/ exports: &#123;&#125;/******/ &#125;;/******//******/ // Execute the module function/******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);/******//******/ // Flag the module as loaded/******/ module.l = true;/******//******/ // Return the exports of the module/******/ return module.exports;/******/ &#125;/******//******//******/ // expose the modules object (__webpack_modules__)/******/ __webpack_require__.m = modules;/******//******/ // expose the module cache/******/ __webpack_require__.c = installedModules;/******//******/ // define getter function for harmony exports/******/ __webpack_require__.d = function(exports, name, getter) &#123;/******/ if(!__webpack_require__.o(exports, name)) &#123;/******/ Object.defineProperty(exports, name, &#123;/******/ configurable: false,/******/ enumerable: true,/******/ get: getter/******/ &#125;);/******/ &#125;/******/ &#125;;/******//******/ // getDefaultExport function for compatibility with non-harmony modules/******/ __webpack_require__.n = function(module) &#123;/******/ var getter = module &amp;&amp; module.__esModule ?/******/ function getDefault() &#123; return module[&apos;default&apos;]; &#125; :/******/ function getModuleExports() &#123; return module; &#125;;/******/ __webpack_require__.d(getter, &apos;a&apos;, getter);/******/ return getter;/******/ &#125;;/******//******/ // Object.prototype.hasOwnProperty.call/******/ __webpack_require__.o = function(object, property) &#123; return Object.prototype.hasOwnProperty.call(object, property); &#125;;/******//******/ // __webpack_public_path__/******/ __webpack_require__.p = &quot;&quot;;/******//******/ // Load entry module and return exports/******/ return __webpack_require__(__webpack_require__.s = 0);/******/ &#125;)/************************************************************************//******/ ([/* 0 *//***/ (function(module, __webpack_exports__, __webpack_require__) &#123;&quot;use strict&quot;;Object.defineProperty(__webpack_exports__, &quot;__esModule&quot;, &#123; value: true &#125;);/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bar__ = __webpack_require__(1);Object(__WEBPACK_IMPORTED_MODULE_0__bar__[&quot;a&quot; /* default */])();/***/ &#125;),/* 1 *//***/ (function(module, __webpack_exports__, __webpack_require__) &#123;&quot;use strict&quot;;/* harmony export (immutable) */ __webpack_exports__[&quot;a&quot;] = bar;function bar() &#123; console.log(&quot;it is from bar..&quot;)&#125;/***/ &#125;)/******/ ]); ES6ES6的模块化，直接看代码吧 12345678910111213a.jsexport const ui = require(&apos;third/jquery-ui/jquery-ui.js&apos;);export const Tab = require(&apos;base/tab/tab.js&apos;);export default &#123;ui,Tab &#125;b.jsimport &#123;ui as UI,Tab&#125; from &apos;a.js&apos;;c.jsexport const timeToSecond = (value, totalPixel) =&gt; value * daySecond / totalPixel;d.jsimport &#123; timeToSecond &#125; from &apos;./c.js&apos;","categories":[],"tags":[],"keywords":[]},{"title":"关于HTTP协议","slug":"HTTP协议","date":"2019-04-24T18:12:00.000Z","updated":"2019-04-26T08:35:45.919Z","comments":true,"path":"2019/04/25/HTTP协议/","link":"","permalink":"http://yoursite.com/2019/04/25/HTTP协议/","excerpt":"","text":"HTTP简介HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。 主要特点1.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。2.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。5、支持B/S及C/S模式。 HTTP之URLHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：http://www.aspxfans.com:8080/news/index.aspboardID=5&amp;ID=24618&amp;page=1#name从上面的URL可以看出，一个完整的URL包括以下几部分：1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符2.域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口4.虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。 URI和URL的区别 URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个用URI来定位的①访问资源的命名机制②存放资源的主机名③资源自身的名称，由路径表示，着重强调于资源。URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：①协议(或称为服务方式)②存有该资源的主机IP地址(有时也包括端口号)③主机资源的具体地址。如目录和文件名等URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。相反的是，URL类可以打开一个到达资源的流。 HTTP之请求消息Request客户端发送一个HTTP请求到服务器的请求消息包括以下格式： 请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。 请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。 Get请求例子，使用Charles抓取的request： GET &nbsp;&nbsp;/562f25980001b1b106000338.jpg HTTP/1.1Host &nbsp;&nbsp; img.mukewang.comUser-Agent &nbsp;&nbsp; Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36Accept &nbsp;&nbsp; image/webp,image/,/*;q=0.8Referer &nbsp;&nbsp; http://www.imooc.com/Accept-Encoding &nbsp;&nbsp; gzip, deflate, sdchAccept-Language &nbsp;&nbsp; zh-CN,zh;q=0.8 第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等第三部分：空行，请求头部后面的空行是必须的即使第四部分的请求数据为空，也必须有空行。第四部分：请求数据也叫主体，可以添加任意的其他数据。这个例子的请求数据为空。 POST请求例子，使用Charles抓取的request：POST &nbsp;&nbsp;&nbsp;&nbsp; / HTTP1.1Host:&nbsp;&nbsp;&nbsp;&nbsp;www.wrox.comUser-Agent:&nbsp;&nbsp;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)Content-Type:application/x-www-form-urlencodedContent-Length:40Connection: Keep-Alivename=Professional%20Ajax&amp;publisher=Wiley第一部分：请求行，第一行明了是post请求，以及http1.1版本。第二部分：请求头部，第二行至第六行。第三部分：空行，第七行的空行。第四部分：请求数据，第八行。 HTTP之响应消息Response一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。例子HTTP/1.1 200 OKDate: Fri, 22 May 2009 06:07:21 GMTContent-Type: text/html; charset=UTF-8 &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;!--body goes here--&gt; &lt;/body&gt; &lt;/html&gt; 第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）第二部分：消息报头，用来说明客户端要使用的一些附加信息第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8第三部分：空行，消息报头后面的空行是必须的第四部分：响应正文，服务器返回给客户端的文本信息。空行后面的html部分为响应正文。 HTTP之状态码状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:1xx：指示信息–表示请求已接收，继续处理2xx：成功–表示请求已被成功接收、理解、接受3xx：重定向–要完成请求必须进行更进一步的操作4xx：客户端错误–请求有语法错误或请求无法实现5xx：服务器端错误–服务器未能实现合法的请求 常见状态码：&nbsp;&nbsp;200 OK &nbsp;&nbsp; //客户端请求成功&nbsp;&nbsp;400 Bad Request &nbsp;&nbsp;//客户端请求有语法错误，不能被服务器所理解&nbsp;&nbsp;401 Unauthorized &nbsp;&nbsp;//请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用&nbsp;&nbsp;403 Forbidden &nbsp;&nbsp;//服务器收到请求，但是拒绝提供服务&nbsp;&nbsp;404 Not Found &nbsp;&nbsp;//请求资源不存在，eg：输入了错误的URL&nbsp;&nbsp;500 Internal Server Error &nbsp;&nbsp;//服务器发生不可预期的错误&nbsp;&nbsp;503 Server Unavailable &nbsp;&nbsp;//服务器当前不能处理客户端的请求，一段时间后可能恢复正常更多状态码http://www.runoob.com/http/http-status-codes.html&gt; HTTP请求方法根据HTTP标准，HTTP请求可以使用多种请求方法。HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。&nbsp;GET:请求指定的页面信息，并返回实体主体。&nbsp;HEAD:类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头&nbsp;POST:向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。&nbsp;PUT:从客户端向服务器传送的数据取代指定的文档的内容。&nbsp;DELETE:请求服务器删除指定的页面。&nbsp;CONNECT:HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。&nbsp;OPTIONS:允许客户端查看服务器的性能。&nbsp;TRACE:回显服务器收到的请求，主要用于测试或诊断。 HTTP工作原理HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。以下是 HTTP 请求/响应的步骤：1、客户端连接到Web服务器一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，http://www.oakcms.cn。2、发送HTTP请求通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。3、服务器接受请求并返回HTTP响应Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。4、释放连接TCP连接若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;5、客户端浏览器解析HTML内容客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;5、释放 TCP连接;6、浏览器将该 html 文本并显示内容; GET和POST请求的区别get请求&nbsp; GET /books/?sex=man&amp;name=Professional HTTP/1.1&nbsp; Host: www.wrox.com&nbsp; User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)&nbsp; Gecko/20050225 Firefox/1.0.1&nbsp; Connection: Keep-Alive注意最后一行是空行post请求&nbsp; POST / HTTP/1.1&nbsp; Host: www.wrox.com&nbsp; User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)&nbsp; Gecko/20050225 Firefox/1.0.1&nbsp; Content-Type: application/x-www-form-urlencoded&nbsp; Content-Length: 40&nbsp; Connection: Keep-Alive &nbsp; name=Professional%20Ajax&amp;publisher=Wiley1、GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变2、传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。而在实际开发中存在的限制主要有：GET: 特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。因此对于GET提交时，传输数据就会受到URL长度的 限制。POST: 由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。3、安全性POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击4、Http get,post,soap协议都是在http上运行的（1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全（2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。（3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式Content-type设置为: text/xml 任何数据都可以xml化。Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.我们看看GET和POST的区别1.GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中.2.GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.3.GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。4.GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.","categories":[],"tags":[],"keywords":[]},{"title":"HTTP协议的基础了解","slug":"HTTP协议的基础了解","date":"2019-04-03T07:28:00.000Z","updated":"2019-04-17T15:55:06.741Z","comments":true,"path":"2019/04/03/HTTP协议的基础了解/","link":"","permalink":"http://yoursite.com/2019/04/03/HTTP协议的基础了解/","excerpt":"http协议是大家在互联网中最为熟悉的协议，只要上网大家都会遇到，但是，很多人被问道什么是http协议，http协议的内容是什么就懵了。这里，我们随便聊聊http协议。","text":"http协议是大家在互联网中最为熟悉的协议，只要上网大家都会遇到，但是，很多人被问道什么是http协议，http协议的内容是什么就懵了。这里，我们随便聊聊http协议。 首先，我们说说协议。我一直觉得“协议”这词不是很好理解，协商以后达成的决议，其实，就是规定，轮不到使用者协商的规定，就像本朝的法律，必须遵守。所以，http协议就是http的规定。 http(Hypertext transfer protocol)超文本传输协议，通过浏览器和服务器进行数据交互，进行超文本（文本、图片、视频等）传输的规定。也就是说，http协议规定了超文本传输所要遵守的规则。那么网页在输入URL到加载，http究竟做了哪些工作呢？（见下图） ​ 浏览器负责发起请求和最后的响应请求，服务器接收请求后，处理请求。我们一步一步来看这个过程，http是如何设定步骤，设置规范的。 1、输入URL。不管是链接还是地址栏的输入，情况都是一样的。http协议已经规定了URL的格式，通过http协议中的域名或IP找到服务器。 2、找到服务器的同时，会有http的请求发送过来，告诉服务器我求你做什么？http协议规定了发送请求的格式，这个格式有三部分组成请求行、请求头、请求体。 请求行包括请求的方式（get、post或其他）、要求响应的文件、http版本。 请求头包括本机信息、浏览器信息等等，当然，也包括URL中？后面的参数。如图： 请求体包括POST传递数据的相关信息，Get方式传值时，请求体为空。 3、请求信息发送至服务器以后，服务器会获取传递过来的相关信息进行后端程序的处理。一般通过request.querystring获取URL传递过来的指，通过request.form获取POST传递过来的值，当然，也是可以获取到所有的其他请求过来的信息，如浏览器信息、cookie信息、操作系统信息等。获取相关的数据以后，服务器就会根据程序进行处理。 4、处理完成以后，服务器会做出响应，向浏览器输出相关信息。http对响应的格式也做出了规定，响应的信息主要包括，响应码、响应头、响应体。 响应码用来标识服务器响应的结果，如我们常看到的200、404等。大致的分类如下：1开头的表示消息，2开头表示成功，3开头表示重定向，4开头表示失败，5开头表示服务器异常。 响应头记录服务器相关信息如服务器是否启用压缩、服务器为IIS或Ngnix、程序所用服务端语言等等。当然，缓存也是在这里设置的，通过修改响应头可以修改html在本地缓存的情况，如设置浏览器缓存过期的时间。 响应体主要是我看到的html的相关内容了。 完成以上四部操作以后，浏览器就断开了与服务器的数据连接，不能在进行数据传输，如果需要再次进行数据传输，那么一切就要从输入URL开始。 如此，便是一个完整的网页流程，http从中的作用就是对整个流程进行规定，包括执行步骤，每一步的数据格式。只有了解http协议以及网页是如何产生的以后，才能对网页进行更好的控制，例如控制浏览器缓存、通过非浏览器发送http请求、get和post传值的选择，甚至是建立长连接，这些都是以http协议为基础。 parse() stringify()var arr=[] var arr=new Array()push() pop() join() shift() reserve() slice()","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"vue2.0开始走起","slug":"vue2-0使用","date":"2018-04-12T05:53:00.000Z","updated":"2019-04-27T07:54:47.731Z","comments":true,"path":"2018/04/12/vue2-0使用/","link":"","permalink":"http://yoursite.com/2018/04/12/vue2-0使用/","excerpt":"","text":"前置知识1.html、css、javascript基础知识需要一定的掌握2.node.js初级知识，需要会npm的使用和项目初始化 下载Vue2.0的两个版本官方网站：https://vuejs.org/ 开发版本：包含完整的警告和调试模式（vue.js） 生产版本：删除了警告，进行了压缩（vue.min.js） 项目结构搭建新建项目结构如下图（只是简单新建，真正项目中会比较复杂）： 1.新建vue2.0文件夹，在此文件夹中分别新建assets文件（主要用于存放静态文件）、example文件以及index.html2.assets文件夹下新建css文件夹、js文件夹 live-server的使用安装环境:node.js npmlive-server是一个简单级的开发服务器1234cnpm install -g live-server 全局安装``` 在项目目录打开 live-server 1###### 编写第一个HelloWorld代码： &lt;!DOCTYPE html&gt; Helloworld Hello World var app=new Vue({ el:’#app’, data:{ message:’hello Vue!’ } }) `","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://yoursite.com/tags/前端开发/"}],"keywords":[]},{"title":"git提交代码5步曲","slug":"git提交代码5步曲","date":"2017-04-27T04:24:00.000Z","updated":"2019-04-27T04:50:10.834Z","comments":true,"path":"2017/04/27/git提交代码5步曲/","link":"","permalink":"http://yoursite.com/2017/04/27/git提交代码5步曲/","excerpt":"","text":"git clone（这个是你新建本地git仓库，如已有可忽略此步）1.git status(查看当前状态)2.git add . 或者 git add XXX3.git commit -m “修复XXbug” （推送修改到本地git库中）4.git pull5.git push","categories":[],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"http://yoursite.com/tags/开发工具/"}],"keywords":[]},{"title":"使用github pages服务搭建博客的好处","slug":"github-pages博客的好处","date":"2017-03-29T07:28:00.000Z","updated":"2019-03-31T05:27:05.841Z","comments":true,"path":"2017/03/29/github-pages博客的好处/","link":"","permalink":"http://yoursite.com/2017/03/29/github-pages博客的好处/","excerpt":"使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个 人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；","text":"使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个 人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等；","categories":[{"name":"hexo搭建博客篇","slug":"hexo搭建博客篇","permalink":"http://yoursite.com/categories/hexo搭建博客篇/"}],"tags":[{"name":"博客之旅","slug":"博客之旅","permalink":"http://yoursite.com/tags/博客之旅/"}],"keywords":[{"name":"hexo搭建博客篇","slug":"hexo搭建博客篇","permalink":"http://yoursite.com/categories/hexo搭建博客篇/"}]},{"title":"hello-world","slug":"hello-world","date":"2016-03-30T12:36:00.000Z","updated":"2019-03-30T19:13:21.325Z","comments":true,"path":"2016/03/30/hello-world/","link":"","permalink":"http://yoursite.com/2016/03/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server(运行)1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo搭建博客篇","slug":"hexo搭建博客篇","permalink":"http://yoursite.com/categories/hexo搭建博客篇/"}],"tags":[{"name":"博客之旅","slug":"博客之旅","permalink":"http://yoursite.com/tags/博客之旅/"}],"keywords":[{"name":"hexo搭建博客篇","slug":"hexo搭建博客篇","permalink":"http://yoursite.com/categories/hexo搭建博客篇/"}]}]}